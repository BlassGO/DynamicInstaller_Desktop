# Dynamic Installer Desktop - Load Dependencies Plugin
# By @BlassGO
grep_prop_string() {
  local REGEX="s/^$1=//p"
  echo "$2" | sed -n "$REGEX" 2>/dev/null | head -n 1
}
get_dep() {
    awk -v _START="START:$1" -v _END="END" '($0==_START){f=1;next}(f&&$0==_END){exit}f' "$2"
}
install_all_from() {
    parse_deps "$1" "$2" || { echo2 error "install_all_from: Failed to parse dependencies from: $1"; return 1; }
    install_all "$2"
}
install_all() {
    local dep
    while read -r dep; do
        install_by_name "$dep" "$1" || {
            echo2 warn "Could not install '$dep'. Some functions may not work."
        }
    done < <(awk '/^START:/ {print substr($0, 7)}' "$1")
}
install_by_name() {
    local props=$(get_dep "$1" "$2") type force needed name paths path out url wrap checksum hash hash_cmd
    [ -z "$props" ] && { echo2 error "install_by_name: Dependency not found: '$1'"; return 1; }
    [ -z "$___LOGFILE" ] && ___LOGFILE="$TMP/zbin/main.deps.log"
    type=$(grep_prop_string type "$props")
    if [ -z "$type" ]; then
        force=$(grep_prop_string force "$props")
        mapfile -d ':' -t paths <<< "$(grep_prop_string path "$props")"
        [ ${#paths[@]} = 0 ] && {
            echo2 warn "Empty 'path' for '$1'. Using system PATH"
            mapfile -t paths <<< "$(echo "$PATH" | tr ':' '\n')"
        }
        [ "$force" != true ] && {
            command -v "$1" >/dev/null && return 0
            path=$(find "${paths[@]}" -name "$1" \( -type f -o -type l \) -executable -print -quit 2>/dev/null)
        } || force=false
        [ -e "$path" ] && export PATH="$(dirname "$path"):$PATH" || {
            echo2 info "Trying to install '$1'"
            needed=$(grep_prop_string needed "$props")
            name=$(grep_prop_string name "$props")
            cmd=$(grep_prop_string cmd "$props")
            [ "$needed" = true ] || needed=false
            $cmd "$name" >> "$___LOGFILE" 2>&1 && {
                command -v "$1" >/dev/null && return 0
                path=$(find "${paths[@]}" -name "$1" \( -type f -o -type l \) -executable -print -quit 2>/dev/null)
                [ -e "$path" ] && export PATH="$(dirname "$path"):$PATH" || return 1
            } || {
                $needed && abort error "Installation [binary='$1', package='$name'] is required, but it failed" || return 1
            }
        }
    else
        out=$(grep_prop_string out "$props")
        checksum=$(grep_prop_string checksum "$props")
        [ -n "$checksum" ] && {
            if command -v sha256sum >/dev/null; then
                hash_cmd="sha256sum"
            elif command -v shasum >/dev/null; then
                hash_cmd="shasum -a 256"
            else
                abort error "Neither sha256sum nor shasum is available. Cannot verify checksum."
                return 1
            fi
            [ -f "$out" ] && {
                hash=$($hash_cmd "$out" | awk '{print $1}')
                if [ "$hash" != "$checksum" ]; then
                    echo2 warn "Checksum mismatch. Removing '$1'"
                    rm -f "$out"
                fi
            }
        }
        [ ! -f "$out" ] && {
            url=$(grep_prop_string url "$props")
            command -v curl >/dev/null || {
                abort error "curl is required to install '$1' but is not installed."
                return 1
            }
            echo2 info "Downloading '$1'"
            curl -L "$url" -o "$out" >> "$___LOGFILE" 2>&1 || {
                echo2 error "Failed to download '$1'"
                rm -f "$out"
                abort
                return 1
            }
            [ -n "$checksum" ] && {
                hash=$($hash_cmd "$out" | awk '{print $1}')
                if [ "$hash" != "$checksum" ]; then
                    echo2 error "Checksum mismatch for '$1'. Probably a corrupted download."
                    rm -f "$out"
                    abort
                    return 1
                fi
            }
        }
        wrap=$(grep_prop_string wrap "$props")
        [ "$wrap" = true ] || wrap=false
        if $wrap; then
            case $type in
                script|binary)
                    chmod +x "$out" || abort error "Failed to make '$out' executable."
                    eval "$1() { \"$out\" \"\$@\"; }"
                    ;;
                jar)
                    if command -v java >/dev/null; then
                        eval "$1() { run_jar \"$out\" \"\$@\"; }"
                    else
                        abort error "Java is required to run '$1' but is not installed."
                        return 1
                    fi
                    ;;
                py|python)
                    if command -v python3 >/dev/null; then
                        eval "$1() { python3 \"$out\" \"\$@\"; }"
                    elif command -v python >/dev/null; then
                        eval "$1() { python3 \"$out\" \"\$@\"; }"
                    else
                        abort error "Python is required to run '$1' but is not installed."
                        return 1
                    fi
                    ;;
                *)
                    abort error "Unknown type '$type' for '$1'. Cannot wrap."
                    return 1
                    ;;
            esac
        fi
    fi
    return 0
}
parse_deps() {
    [ -z "$___PKG_MANAGER_TEMP" ] && ___PKG_MANAGER_TEMP="$TMP/zbin/pkg_manager"
    [ -f "$1" ] || { echo2 error "parse_deps: File not found: $1"; return 1; }
    [ -z "$2" ] && { echo2 error "parse_deps: Output file not specified"; return 1; }
    [ -z "$PKG_MANAGER" -a -f "$___PKG_MANAGER_TEMP" ] && PKG_MANAGER=$(<"$___PKG_MANAGER_TEMP")
    awk -v PM="$PKG_MANAGER" -v PM_FILE="$___PKG_MANAGER_TEMP" -v BREW="$___BREW_PREFIX" -v PROJECT="$project" -v SEP=";" '
    BEGIN {
        depth=0; t=0; token=""; tc=0; key=""; value=""; op=""; ops["="]=1; ops["+"]=1; error="";
        whitespace[" "]="1"; whitespace["\t"]="1"; whitespace["\n"]="1"
        token_regex="^[a-zA-Z0-9_-]+"
        str_regex="\"[^\"]*\""
    }
    {
        i = 1
        len = length($0)
        while (i <= len) {
            c = substr($0, i, 1)
            if (t == 0) {
                t = get_type(c)
            }
            if (t == 0) {
                i++
                continue
            } else if (t == 1) {
                token = substr($0, i)
                if (match(token, token_regex)) {
                    token = substr(token, RSTART, RLENGTH)
                    push()
                    if (is_op(tokens[tc - 1])) {
                        process_value()
                    }
                    i += RLENGTH
                    t = 0
                    continue
                }
            } else if (t == 2) {
                token = substr($0, i)
                if (match(token, str_regex)) {
                    token = substr(token, RSTART + 1, RLENGTH - 2)
                    push()
                    i += RLENGTH
                    process_value()
                    t = 0
                } else {
                    error = "Unclosed string literal"
                    exit
                }
                continue
            } else if (t == 3) {
                if (c in ops) {
                    token = token c
                } else if (is_op(token)) {
                    push()
                    t = 0
                    continue
                } else {
                    error = "Invalid operator: " token
                    exit
                }
            } else if (t == 4) {
                if (c == "{") {
                    depth++
                    if (tokens[tc] != "") {
                        vars["___blockname" SEP depth] = tokens[tc]
                        if (depth == 1 && !found) {
                            if (tokens[tc] == "static") {
                                static = 1
                            } else if (PM != "") {
                                found = (tokens[tc] == PM)
                            } else if (system("command -v " tokens[tc] " >/dev/null 2>&1 && echo " tokens[tc] " > \"" PM_FILE "\"") == 0) {
                                found = 1
                                PM = tokens[tc]
                            }
                        }
                        reset()
                    } else {
                        error = "Block name expected before '{'"
                        exit
                    }
                } else if (c == "}") {
                    if ((found && vars["needed" SEP depth] != "") || (static && vars["type" SEP depth] != "")) {
                        blockname = vars["___blockname" SEP depth]
                        if (blockname == "") {
                            error = "Block name is required for \"needed\" at depth " depth
                            exit
                        } else if (found && vars["name" SEP depth] == "") {
                            error = "Block \"" blockname "\" at depth " depth " has a \"needed\" property but no \"name\" property"
                            exit
                        } else if (static && vars["url" SEP depth] == "") {
                            error = "Block \"" blockname "\" at depth " depth " has a \"type\" property but no \"url\" property"
                            exit
                        }
                        delete vars["___blockname" SEP depth]
                        current_keys["___blockname"] = 1
                        
                        result = result "START:" blockname "\n"
                        
                        # Collect current depth keys
                        for (k in vars) {
                            split(k, parts, SEP)
                            if (parts[2] == depth ) {
                                current_keys[parts[1]] = 1
                                result = result parts[1] "=" vars[k] "\n"
                                delete vars[k]
                            }
                        }
                        # Collect inherited keys
                        for (k in vars) {
                            split(k, parts, SEP)
                            if (parts[2] < depth && !(parts[1] in current_keys)) {
                                result = result parts[1] "=" vars[k] "\n"
                            }
                        }
                        result = result "END\n"
                        delete current_keys
                    } else {
                        # Clean up variables at this depth
                        for (k in vars) {
                            split(k, parts, SEP)
                            if (parts[2] == depth) {
                                delete vars[k]
                            }
                        }
                    }
                    depth--
                    if (found && depth == 0) {
                        exit
                    }
                }
                t = 0
            } else if (t == 5) {
                i += len + 1
                t = 0
                continue
            }
            i++
        }
    }
    END {
        if (error != "") {
            print "[ERROR] " error > "/dev/stderr"
            exit 1
        }
        if (depth > 0) {
            print "[ERROR] Unclosed braces, depth=" depth > "/dev/stderr"
        } else if (depth < 0) {
            print "[ERROR] Too many closing braces, depth=" depth > "/dev/stderr"
        } else {
            printf "%s", result
        }
    }
    function reset() {
        delete tokens
        tc = 0
        key = ""
        value = ""
        op = ""
        token = ""
    }
    function push() {
        tc++
        tokens[tc] = token
        token = ""
    }
    function is_op(c) {
        return (c == "=" || c == "+=")
    }
    function get_type(c) {
        if (c in whitespace) return 0
        if (c ~ /[a-zA-Z0-9_-]/) return 1
        if (c == "\"") return 2
        if (c == "=" || c == "+") return 3
        if (c == "{" || c == "}") return 4
        if (c == "#") return 5
        return 0
    }
    function process_value() {
        key = tokens[tc - 2]
        op = tokens[tc - 1]
        value = tokens[tc]
        if (!is_op(op)) {
            error = "Operator expected before value but found: " tokens[tc - 1]
            exit
        }
        if (!(key ~ token_regex)) {
            error = "Invalid property name: " key
            exit
        }
        value = gensub(/\$BREW_PREFIX/, BREW, "g", value)
        value = gensub(/\$PROJECT/, PROJECT, "g", value)
        if (op == "=") {
            vars[key SEP depth] = value
        } else if (op == "+=") {
            for (d = depth - 1; d >= 0; d--) {
                if ((key SEP d) in vars) {
                    if (key == "path") {
                       __SEP = ":"
                    } else if (key == "cmd") {
                       __SEP = " "
                    } else {
                       __SEP = ""
                    }
                    vars[key SEP depth] = vars[key SEP d] __SEP value
                    break
                }
            }
            if (!((key SEP depth) in vars)) {
                vars[key SEP depth] = value
            }
        }
        reset()
    }
    ' "$1" >> "$2"
}